<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2023-05-23T16:27:06+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">계단을 오르는 백엔드 개발자</title><subtitle>차근차근 해볼려고 합니다.</subtitle><author><name>경동훈</name></author><entry><title type="html">JAVA, String(문자열)을 이용해 도시 이름 비교하기.</title><link href="http://localhost:4000/java/JAVA029/" rel="alternate" type="text/html" title="JAVA, String(문자열)을 이용해 도시 이름 비교하기." /><published>2023-05-21T00:00:00+09:00</published><updated>2023-05-21T00:00:00+09:00</updated><id>http://localhost:4000/java/JAVA029</id><content type="html" xml:base="http://localhost:4000/java/JAVA029/"><![CDATA[<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>public class basic066 {
</code></pre></div></div>

<blockquote>
  <p>원래 new키워드로 생성한 객체의 stack의 레퍼런스는 같을 수 없다. 또한 heap의 해시코드도 같을수 없다.</p>
  <blockquote>
    <p>그러나 String은 Heap의 풀(Pool)을 사용하므로 같은 문자열에 대하여 new로 생성한 문자열의 Stack레퍼런스는 다르지만 Heap의 해시코드는 동일하다.</p>
    <blockquote>
      <p>같은 문자열에 대하여 new로 생성하지않은 문자열은 Stack의 레퍼런스와 Heap의 래시코드가 동일하다. String의생성방법에 따라 Stack의 레퍼런스는 다를 수 있지만 Heap의해시코드는 동일하다.</p>
    </blockquote>
  </blockquote>
</blockquote>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>	public static void main(String[]args) {
		String city1="asia";
</code></pre></div></div>

<blockquote>
  <p>String은 참조타입이지만 new키워드를 사용하지 않고 생성가능하다.</p>
</blockquote>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>		String city2="europe";
		String city3=new  String("asia");
		String city7="asia";
		System.out.println(city1); 
		System.out.println(city1.length());
</code></pre></div></div>

<blockquote>
  <p>문자열의 길이를 구한다. (.length를 이용)</p>
</blockquote>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>		System.out.println(city1==city2);
</code></pre></div></div>

<blockquote>
  <p>(중요) 다른문자열에 대하여 ==는 False다. ==는 Stack의 레퍼런스를 비교한다.</p>
</blockquote>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>		System.out.println(city1.equals(city2));
</code></pre></div></div>

<blockquote>
  <p>(중요) 다른문자열에 대하여 .equals() False다. .equals()는 해시코드를 비교한다.</p>
</blockquote>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>		System.out.println(city1==city3);
</code></pre></div></div>

<blockquote>
  <p>(왕 중요) 같은 문자열인지 비교한다. “new키워드로 생성하지않은 문자열에 대해 같은 문자열이면 .equals나 == 이나 다 true이다.</p>
  <blockquote>
    <p>new 키워드로 생성한 문자열에 대해 같은 문자열이면 .equals()는 참이지만 ==은 레퍼런스가 다르므로 거짓이다. -&gt;문자열은 .equals()를 권장한다</p>
  </blockquote>
</blockquote>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>		System.out.println(city1==city7);
		System.out.println(city1.equals(city3));
		System.out.println(city1.equals(city7));
		
		String city4 = String.format("%s-%s", city1,city2);
		System.out.println(city4);
		String city5=city1+"-"+city2+1+2;
		System.out.println(city5);
		String city6=1+2+city1+"-"+city2;
		System.out.println(city6);
	}
}
</code></pre></div></div>

<p>//결과</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>asia
4
false
false
false
true
true
true
asia-europe
asia-europe12
3asia-europe
</code></pre></div></div>]]></content><author><name>경동훈</name></author><category term="JAVA" /><category term="JAVA" /><category term="Pratice" /><summary type="html"><![CDATA[public class basic066 { 원래 new키워드로 생성한 객체의 stack의 레퍼런스는 같을 수 없다. 또한 heap의 해시코드도 같을수 없다. 그러나 String은 Heap의 풀(Pool)을 사용하므로 같은 문자열에 대하여 new로 생성한 문자열의 Stack레퍼런스는 다르지만 Heap의 해시코드는 동일하다. 같은 문자열에 대하여 new로 생성하지않은 문자열은 Stack의 레퍼런스와 Heap의 래시코드가 동일하다. String의생성방법에 따라 Stack의 레퍼런스는 다를 수 있지만 Heap의해시코드는 동일하다.]]></summary></entry><entry><title type="html">JAVA, String(문자열)가공하기.</title><link href="http://localhost:4000/java/JAVA030/" rel="alternate" type="text/html" title="JAVA, String(문자열)가공하기." /><published>2023-05-21T00:00:00+09:00</published><updated>2023-05-21T00:00:00+09:00</updated><id>http://localhost:4000/java/JAVA030</id><content type="html" xml:base="http://localhost:4000/java/JAVA030/"><![CDATA[<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>public static void main(String []args) {
		String text="Hello Java4 Android";
		String com="HEllo java4 Android";
</code></pre></div></div>

<blockquote>
  <p>//String은 문자열 가공을 위한 메서드를 많이 제공한다.</p>
</blockquote>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>		System.out.println(text.charAt(2));
</code></pre></div></div>

<blockquote>
  <p>자바에서 인덱스(위치)는 0부터 시작한다. ‘H’,’e’ … Hello에서 l는 2번쨰 인덱스이다.</p>
</blockquote>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>		System.out.println(text.concat("s"));
</code></pre></div></div>

<blockquote>
  <p>concat()은 +와 같다. 문자열 s를 오른쪽에 붙인다.</p>
</blockquote>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>		System.out.println(text.contains("And")); 
</code></pre></div></div>

<blockquote>
  <p>And 문자열을 포함하고있는지 판단한다.true</p>
</blockquote>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>		System.out.println(text.equals(com));
</code></pre></div></div>

<blockquote>
  <p>text와 com이 같은지 확인한다. 1번째 문자열이 서로 대,소문자차이가 있으므로 false</p>
</blockquote>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>		System.out.println(text.equalsIgnoreCase(com));
</code></pre></div></div>

<blockquote>
  <p>text와 com이 같은지 확인한다. 1번째 문자열이 서로 대,소문자차이를 무시하므로 true</p>
</blockquote>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>		System.out.println(text.indexOf("a")); 
</code></pre></div></div>

<blockquote>
  <p>a의 가장 먼저 나오는 문자열 인덱스(위치)를 추출한다. 없으면 -1을 반환한다. 7.</p>
</blockquote>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>		System.out.println(text.trim());
</code></pre></div></div>

<blockquote>
  <p>양쪽의 공백을 자른다.(ex. 앞에 있는 스페이스바 같은 상황)</p>
</blockquote>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>		System.out.println(text.length());
</code></pre></div></div>

<blockquote>
  <p>문자열의 길이를 반환한다. 띄워쓰기도 포함한다.</p>
</blockquote>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>		System.out.println(text.substring(7));
</code></pre></div></div>

<blockquote>
  <p>.substring은 ()의 숫자 만큼 띄우고 그 이후부터 문자열을 반환한다.</p>
</blockquote>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>		System.out.println(text.substring(7,11));
</code></pre></div></div>

<blockquote>
  <p>.substring(A,B)는 A부터 (B-A)를 반환한다. 7과 11사이의 문자열을 반환한다는뜻.</p>
</blockquote>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>		System.out.println(text.replace(" ", "-"));
</code></pre></div></div>

<blockquote>
  <p>replace는 (A, B) A를 B로변경한다.</p>
</blockquote>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>		System.out.println(text.replaceAll(" ", "-"));
</code></pre></div></div>

<blockquote>
  <p>동일.</p>
</blockquote>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>		System.out.println(text.toUpperCase());
</code></pre></div></div>

<blockquote>
  <p>문자열을 대문자로 변경</p>
</blockquote>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>		System.out.println(text.toLowerCase());
</code></pre></div></div>

<blockquote>
  <p>문자열을 소문자로 변환</p>
</blockquote>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>		String[]sp	= text.split(" "); 
</code></pre></div></div>

<blockquote>
  <p>split(del)은 del문자를 기준으로 문자열을 잘라 배열로 반환한다.</p>
</blockquote>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>		for(int i = 0; i&lt;sp.length; i++) {
			System.out.println(i+"\t\t"+sp[i]+"\t\t"+sp[i].length());
		}
	}
}
</code></pre></div></div>

<p>//결과</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>l
Hello Java4 Androids
true
false
true
7
9
Hello Java4 Android
19
ava4 Android
ava4
Hello-Java4-Android
Hello-Java4-Android
HELLO JAVA4 ANDROID
hello java4 android
0		Hello		5
1		Java4		5
2		Android		7
</code></pre></div></div>]]></content><author><name>경동훈</name></author><category term="JAVA" /><category term="JAVA" /><category term="Pratice" /><summary type="html"><![CDATA[public static void main(String []args) { String text="Hello Java4 Android"; String com="HEllo java4 Android"; //String은 문자열 가공을 위한 메서드를 많이 제공한다.]]></summary></entry><entry><title type="html">JAVA, 리플렉션(Reflection)을 이용하여 클래스 정보 출력하기</title><link href="http://localhost:4000/java/JAVA031/" rel="alternate" type="text/html" title="JAVA, 리플렉션(Reflection)을 이용하여 클래스 정보 출력하기" /><published>2023-05-21T00:00:00+09:00</published><updated>2023-05-21T00:00:00+09:00</updated><id>http://localhost:4000/java/JAVA031</id><content type="html" xml:base="http://localhost:4000/java/JAVA031/"><![CDATA[<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>import java.lang.reflect.Constructor;
import java.lang.reflect.Method;
</code></pre></div></div>

<blockquote>
  <p>reflect을 이용하면 클래스에 대한 생성자와 메서드 등에 대한 정보를 얻을 수 있다.</p>
  <blockquote>
    <p>생성자는 new예약어로 객체를 생성할 떄 한 번 호출되는 초기화용 메서드다. 생성자는 public이나 String(char[])처럼 “제한자 클래스이름 (인자)”의 형태로사용됨.</p>
    <blockquote>
      <p>메서드는 public int charAt(index)처럼 “제한자 리턴타입 메서드이름(인자)”의 형태를 취한다.</p>
      <blockquote>
        <p>“제한자(modifier)는 int타입이므로 문자열로 변환해야 보기에 편리하다. 예를 들어 1은 public 2는private이다.</p>
        <blockquote>
          <p>아규먼트나 리타입에서 배열은”[“로 시작하고 타입은 “[C”처럼 “[“뒤에 대문자를 붙인다. “[B”는 byte “[C”는 char[]이다.</p>
        </blockquote>
      </blockquote>
    </blockquote>
  </blockquote>
</blockquote>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>public class basic068 {
	public static String toModi(int n) {
		String s=""; 
		
		switch(n) { 
</code></pre></div></div>

<blockquote>
  <p>제한자(modifier)가 정수이므로 문자열로 반환.</p>
</blockquote>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>		case 0: s=" "break; 
		case 1 : s="public ";break;  
		case 2: s="private ";break;  
		case 4: s="protected ";break;  
		case 8: s="static ";break; 
		case 10: s="private static ";break; 
		case 9: 
</code></pre></div></div>

<blockquote>
  <p>break를 만날때까지 계속 실행한다(fall trough)현상.</p>
</blockquote>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>		case 137: s="public static ";break; 
		case 17: s= "public final"; break;
		case 257: s="public native ";break;  
		case 260: s="protected native ";break;  
		case 273: s="public final native ";break;  
		default: s="xxxx"; break; 
</code></pre></div></div>

<blockquote>
  <p>0이면 default(“”),1이면 public,2이면private로 변환.</p>
</blockquote>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>}
			return s;  
}
			public static String toRe(String msg) {
			String s=""; 
			if(msg.indexOf("[")!=-1) { 
</code></pre></div></div>

<blockquote>
  <p>아규먼트나 리턴타입에 “[“가 있다면 배열이다.</p>
</blockquote>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>				if(msg.contains("[C")){//"[C"는 char[]이다.
					s=msg.substring(msg.indexOf(" ")+ 1).trim();
					s=s.replace("[C", "char[]"); 
}
				else if (msg.contains("[L")) { 
</code></pre></div></div>

<blockquote>
  <p>“[L”은 java.lang.String이다.</p>
</blockquote>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>					s=msg.substring(msg.indexOf(" ")+1).trim();
					s=s.replace("[L", "").replace(";", "");
					s=s.concat("[]");
				}
				else if(msg.contains("[B")) {
</code></pre></div></div>

<blockquote>
  <p>“[B”는 Byte이다.</p>
</blockquote>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>					s=msg.substring(msg.indexOf(" ")+1).trim();
					s=s.replace("[B", "byte[]");
				}
		}
			else if(msg.indexOf(" ")!=-1) {
				s=msg.substring(msg.indexOf(" ")+1).trim();
				s=s.replace("[B", "byte[]");
			}
			else {
				s=msg.trim();
			}
			return s;
	}
	public static void main(String[]args) {
		Object obj1=new Object();
		try {
			Class classes = Class.forName("java.lang.String");
			System.out.println("Method찾기 =--=-=-=-=-=-=");
			Method[] mes= classes.getDeclaredMethods();
</code></pre></div></div>

<blockquote>
  <p>모든 메서드를 얻는다.</p>
</blockquote>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>			for(Method me:mes) {
				if(me.getModifiers()&gt;4000) {continue;}
				System.out.printf("%s\t\t",toModi(me.getModifiers()));
				System.out.printf("%-30s\t\t",toRe(me.getReturnType().toString()));
				System.out.printf("%s",me.getName());
				System.out.printf("(","");
				Class[]aa=me.getParameterTypes();
				for(int j =0; j&lt;aa.length; j++) {
					System.out.printf("%s",toRe(aa[j].getName()));
					if(j!=aa.length-1) {
						System.out.printf(",");
					}
				}
				System.out.printf(")","");
				System.out.println();
			}
</code></pre></div></div>

<blockquote>
  <p>메서드의 정보를 5라인, 24라인의 메서드를 이용하여 출력한다.</p>
</blockquote>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>			System.out.printf("생성자 찾기 -=-=-=-=-=");
			Constructor [] constructor = classes.getDeclaredConstructors(); //모든 생성자를 얻는다.
			for(Constructor con: constructor) {
				System.out.print(con.getName());
				System.out.printf("(","");
				Class []aa=con.getParameterTypes();
				for(int j=0; j&lt;aa.length ; j++) {
					System.out.printf("%s",toRe(aa[j].getName()));
					if(j!=aa.length-1) {
						System.out.print(",");
					}
				}
				System.out.printf(")","");
				System.out.println();
			}
</code></pre></div></div>

<blockquote>
  <p>생성자의 정보르 5라인, 24라인의메서드를 이용하여 출력.</p>
</blockquote>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>		}
		catch (ClassNotFoundException e) {
		System.out.println(e);
		}
	}
}
</code></pre></div></div>

<p>//결과</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Method찾기 =--=-=-=-=-=-=
		byte[]                        		value()
public 		boolean                       		equals(java.lang.Object)
public 		int                           		length()
public 		java.lang.String              		toString()
public 		int                           		hashCode()
public 		void                          		getChars(int,int,char[],int)
public 		int                           		compareTo(java.lang.String)
public 		int                           		indexOf(int)
public 		int                           		indexOf(java.lang.String)
static 		int                           		indexOf(byte[],byte,int,java.lang.String,int)
public 		int                           		indexOf(java.lang.String,int)
public 		int                           		indexOf(int,int)
static 		void                          		checkIndex(int,int)
public static 		java.lang.String              		valueOf(int)
.....
</code></pre></div></div>]]></content><author><name>경동훈</name></author><category term="JAVA" /><category term="JAVA" /><category term="Pratice" /><summary type="html"><![CDATA[import java.lang.reflect.Constructor; import java.lang.reflect.Method;]]></summary></entry><entry><title type="html">JAVA, String Buffer로 문자열 수정, 변경, 추가하기.</title><link href="http://localhost:4000/java/JAVA032/" rel="alternate" type="text/html" title="JAVA, String Buffer로 문자열 수정, 변경, 추가하기." /><published>2023-05-21T00:00:00+09:00</published><updated>2023-05-21T00:00:00+09:00</updated><id>http://localhost:4000/java/JAVA032</id><content type="html" xml:base="http://localhost:4000/java/JAVA032/"><![CDATA[<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>public class basic069 {
	public static void main(String[] args) {
</code></pre></div></div>

<blockquote>
  <p>StringBuffer 생성</p>
  <blockquote>
    <p>문자열을 저장 또는 처리하는 String은 참조 타입이지만 성격을 변경해서(오버라이딩)기본타입과 동일한 CBV(값 복사)를 한다. 문자열을 연산한 후 대입연산자로 저장해야 변경한다.</p>
    <blockquote>
      <p>바꾼 문자열을 다시 대입하지않으면 원래문자열이 되는 특징이 이뮤터블이다. 내용이 변경되면 새로운 주소를 갖는다.</p>
      <blockquote>
        <p>StringBuffer는 저장하는 내영이 변경이 되어도 처음 주소가 변경되지않는다.</p>
        <blockquote>
          <p>바꾼 문자열을 다시 대입하지않아도 원래 문자열이 변하는 것을 뮤터블 이라고 한다.(중요) [주소가 변경되지않고, 바뀐 문자열이 대입하지않아도 바뀌는것.]</p>
          <blockquote>
            <p>StringBuffer로 문자열을 연산한다음 최종으로 toString()을 통하여 String으로 변환하여 사용한다.
			StringBuffer sb1=new StringBuffer();</p>
            <blockquote>
              <p>계속 붙이는 함수 mutable</p>
            </blockquote>
          </blockquote>
        </blockquote>
      </blockquote>
    </blockquote>
  </blockquote>
</blockquote>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>			sb1.append("안녕하세요 ") 
</code></pre></div></div>

<blockquote>
  <p>.append는 컨케스트레이션(+ ,concat)역할을 한다. 그러나 StingBuffer는 뮤터블하므로 다시 대입하지않아도 된다.</p>
</blockquote>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>				.append("또 만나요. ")
				.append("모두를 사랑해요. 기다려봐. ");
				System.out.println(sb1.toString()+sb1.hashCode()); &gt; 2 replace

				sb1.replace(0,2,"나 보기가 역겨워");
</code></pre></div></div>

<blockquote>
  <p>replace(0,2,”나보기가 역겨워”)는 0번째부터 (2-1)번째까지의 문자열 안녕을 제거하고 넣는다.</p>
</blockquote>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>				System.out.println(sb1.toString()+sb1.hashCode());
</code></pre></div></div>

<blockquote>
  <p>3 reverse</p>
</blockquote>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>				sb1.reverse();
				System.out.println(sb1.toString());
</code></pre></div></div>

<blockquote>
  <p>4 delete</p>
</blockquote>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>				sb1.delete(10,15);
				System.out.println(sb1.toString());
</code></pre></div></div>

<blockquote>
  <p>5 cal by reference, shallow copy</p>
</blockquote>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>				replaces(sb1);
				System.out.println(sb1.toString());
	}
				public static void replaces(StringBuffer sb) {
				sb.reverse();
</code></pre></div></div>

<blockquote>
  <p>0부터2까지를 GoGo로</p>
</blockquote>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>				sb.replace(0,3,"GoGo");
	}
}
</code></pre></div></div>

<p>//결과</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>안녕하세요 또 만나요. 모두를 사랑해요. 기다려봐. 2109957412
나 보기가 역겨워하세요 또 만나요. 모두를 사랑해요. 기다려봐. 2109957412
.봐려다기 .요해랑사 를두모 .요나만 또 요세하워겨역 가기보 나
.봐려다기 .요해모 .요나만 또 요세하워겨역 가기보 나
GoGo기가 역겨워하세요 또 만나요. 모해요. 기다려봐. 
</code></pre></div></div>]]></content><author><name>경동훈</name></author><category term="JAVA" /><category term="JAVA" /><category term="Pratice" /><summary type="html"><![CDATA[public class basic069 { public static void main(String[] args) {]]></summary></entry><entry><title type="html">JAVA, StringBuilder로 문자열 수정, 변경, 추가하기.</title><link href="http://localhost:4000/java/JAVA033/" rel="alternate" type="text/html" title="JAVA, StringBuilder로 문자열 수정, 변경, 추가하기." /><published>2023-05-21T00:00:00+09:00</published><updated>2023-05-21T00:00:00+09:00</updated><id>http://localhost:4000/java/JAVA033</id><content type="html" xml:base="http://localhost:4000/java/JAVA033/"><![CDATA[<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>public class basic070 {
	public static void main(String[]args) {
		StringBuilder sbu = new	StringBuilder();
		sbu.append("가나")
			.append("다라")
			.append("마바");
		System.out.println(sbu);
		System.out.println("------");
		sbu.replace(1, 2, "붥");
		System.out.println(sbu);
		System.out.println("------");
		sbu.reverse();
		System.out.println(sbu);
		System.out.println("------");
		sbu.deleteCharAt(2);
		System.out.println(sbu);
		System.out.println("------");
		sbu.delete(0, 1);
		System.out.println(sbu);
		System.out.println("------");
		String ss = sbu.substring(0);
		System.out.println(ss);
		System.out.println(sbu);
		System.out.println("------");
		String st = sbu.substring(1);
		System.out.println(st);
		System.out.println(sbu);
		System.out.println("------");
	}
}
</code></pre></div></div>

<p>//결과</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>가나다라마바
------
가붥다라마바
------
바마라다붥가
------
바마다붥가
------
마다붥가
------
마다붥가
마다붥가
------
다붥가
마다붥가
------
</code></pre></div></div>]]></content><author><name>경동훈</name></author><category term="JAVA" /><category term="JAVA" /><category term="Pratice" /><summary type="html"><![CDATA[public class basic070 { public static void main(String[]args) { StringBuilder sbu = new StringBuilder(); sbu.append("가나") .append("다라") .append("마바"); System.out.println(sbu); System.out.println("------"); sbu.replace(1, 2, "붥"); System.out.println(sbu); System.out.println("------"); sbu.reverse(); System.out.println(sbu); System.out.println("------"); sbu.deleteCharAt(2); System.out.println(sbu); System.out.println("------"); sbu.delete(0, 1); System.out.println(sbu); System.out.println("------"); String ss = sbu.substring(0); System.out.println(ss); System.out.println(sbu); System.out.println("------"); String st = sbu.substring(1); System.out.println(st); System.out.println(sbu); System.out.println("------"); } }]]></summary></entry><entry><title type="html">JAVA, 배열을 이용하여 정수 출력해보기.</title><link href="http://localhost:4000/java/JAVA017/" rel="alternate" type="text/html" title="JAVA, 배열을 이용하여 정수 출력해보기." /><published>2023-05-21T00:00:00+09:00</published><updated>2023-05-21T00:00:00+09:00</updated><id>http://localhost:4000/java/JAVA017</id><content type="html" xml:base="http://localhost:4000/java/JAVA017/"><![CDATA[<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>public class basic054 {
	public static void main(String[]args) {
		int[]mm= {1,6,22,23,33}	;
		for(int m : mm) {	
</code></pre></div></div>

<blockquote>
  <p>배열이나 리스트를 index로 지정하지 않아도 되므로 출력할때 매우 편하다. (출력위주로 할떄 사용)</p>
</blockquote>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>			System.out.printf(m+"\t"); 
</code></pre></div></div>

<blockquote>
  <p>:(in) 뒤에는 배열이나 리스트가 오고, 앞에는 타입이 온다.</p>
</blockquote>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>		}
		System.out.println();
	}
}
</code></pre></div></div>

<p>//결과</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>1	6	22	23	33	
</code></pre></div></div>

<blockquote>

</blockquote>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>for(int i = 0; i&lt;mm.lenght; i++) {
	int m=mm[i];
	System.out.printf(m+"\t");
	{
와 동일하다
</code></pre></div></div>]]></content><author><name>경동훈</name></author><category term="JAVA" /><category term="JAVA" /><category term="Pratice" /><summary type="html"><![CDATA[public class basic054 { public static void main(String[]args) { int[]mm= {1,6,22,23,33} ; for(int m : mm) { 배열이나 리스트를 index로 지정하지 않아도 되므로 출력할때 매우 편하다. (출력위주로 할떄 사용)]]></summary></entry><entry><title type="html">JAVA, 참조변수 이용해보기.</title><link href="http://localhost:4000/java/JAVA006/" rel="alternate" type="text/html" title="JAVA, 참조변수 이용해보기." /><published>2023-05-21T00:00:00+09:00</published><updated>2023-05-21T00:00:00+09:00</updated><id>http://localhost:4000/java/JAVA006</id><content type="html" xml:base="http://localhost:4000/java/JAVA006/"><![CDATA[<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>public class basic033 {
	public static void main(String []args) {
		double latitude1 = 37.52;
		double longtitude1=127.00;
		double latitude2=35.13;
		double lontitude2=129.04;	
</code></pre></div></div>

<blockquote>
  <p>위도, 경도 객체</p>
</blockquote>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>		Geo geo1 = new Geo();
		geo1.latitude=latitude1;
		geo1.longtitude=longtitude1;
		System.out.println(geo1.latitude+"\t"+geo1.longtitude);
		
		Geo geo2 = new Geo();
		geo2.latitude=latitude2;
		geo2.longtitude=lontitude2;
		
		Geo geo =geo1;
		System.out.println(geo.latitude+"\t"+geo.longtitude);			
	}
}
</code></pre></div></div>

<p>//결과</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>37.52	127.0
37.52	127.0
</code></pre></div></div>]]></content><author><name>경동훈</name></author><category term="JAVA" /><category term="JAVA" /><category term="Pratice" /><summary type="html"><![CDATA[public class basic033 { public static void main(String []args) { double latitude1 = 37.52; double longtitude1=127.00; double latitude2=35.13; double lontitude2=129.04;]]></summary></entry><entry><title type="html">JAVA, 삼항연산자.</title><link href="http://localhost:4000/java/JAVA007/" rel="alternate" type="text/html" title="JAVA, 삼항연산자." /><published>2023-05-21T00:00:00+09:00</published><updated>2023-05-21T00:00:00+09:00</updated><id>http://localhost:4000/java/JAVA007</id><content type="html" xml:base="http://localhost:4000/java/JAVA007/"><![CDATA[<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>public class basic035 {
	public static void main(String []args) {
		int temp=9;
		temp =(temp%2==1)?temp*3+1 : temp/2; 
</code></pre></div></div>

<blockquote>
  <p>삼항연산자, 간단하게, “if(a){ d=b} else{d=c}”는 “D=A?b:c”와 같다.</p>
</blockquote>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>		System.out.printf("계산후 = %d\n", temp);
	}
}
</code></pre></div></div>

<p>//결과</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>계산후 = 28
</code></pre></div></div>]]></content><author><name>경동훈</name></author><category term="JAVA" /><category term="JAVA" /><category term="Pratice" /><summary type="html"><![CDATA[public class basic035 { public static void main(String []args) { int temp=9; temp =(temp%2==1)?temp*3+1 : temp/2; 삼항연산자, 간단하게, “if(a){ d=b} else{d=c}”는 “D=A?b:c”와 같다.]]></summary></entry><entry><title type="html">JAVA, switch와 case이용해보기..</title><link href="http://localhost:4000/java/JAVA008/" rel="alternate" type="text/html" title="JAVA, switch와 case이용해보기.." /><published>2023-05-21T00:00:00+09:00</published><updated>2023-05-21T00:00:00+09:00</updated><id>http://localhost:4000/java/JAVA008</id><content type="html" xml:base="http://localhost:4000/java/JAVA008/"><![CDATA[<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>public class basic036 {
	public static String textInfor(int index, double value) {
		String result = "";
		switch(index) {
		case 23 : 
			result = "신체지수";
			break;
		}
		return result + (value*100);
	}
</code></pre></div></div>

<blockquote>

  <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>	public static void main(String []args) {
		int index=23;
		double value=0.86;
		String st=textInfor(index, value); 
</code></pre></div>  </div>
</blockquote>

<blockquote>
  <p>case에서 분기한 결과 문자열에 각 지수값을 붙여서 문자열을 반환한다.</p>
  <blockquote>
    <p>문자열+기본타입은 문자열이된다 ex)”안녕”+1+2는 안녕12가 되고, 1+2+”안녕”은 “3안녕”이 된다.</p>
  </blockquote>
</blockquote>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>		System.out.println(st);
	}
}
</code></pre></div></div>

<p>//결과</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>신체지수86.0
</code></pre></div></div>]]></content><author><name>경동훈</name></author><category term="JAVA" /><category term="JAVA" /><category term="Pratice" /><summary type="html"><![CDATA[public class basic036 { public static String textInfor(int index, double value) { String result = ""; switch(index) { case 23 : result = "신체지수"; break; } return result + (value*100); }]]></summary></entry><entry><title type="html">JAVA, switch와 case, Enum을 이용한 상수들로 신체지수 구하기.</title><link href="http://localhost:4000/java/JAVA009/" rel="alternate" type="text/html" title="JAVA, switch와 case, Enum을 이용한 상수들로 신체지수 구하기." /><published>2023-05-21T00:00:00+09:00</published><updated>2023-05-21T00:00:00+09:00</updated><id>http://localhost:4000/java/JAVA009</id><content type="html" xml:base="http://localhost:4000/java/JAVA009/"><![CDATA[<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>public enum PEI {
	PHYSICAL(23),EMOTIONAL(28),INTELLECTUAL(33);
		private final int peiValue;
		PEI(int pie){
			this.peiValue=pie;
		}
		public int getPei()	{
			return peiValue;
		}
}

public class basic038 {
	public static String textInfor(PEI index, double value) {
		String result = "";
		switch(index) {
			case PHYSICAL : result = "신체지수"; break;
			case EMOTIONAL : result = "감정지수"; break;
			case INTELLECTUAL : result = "지성지수"; break;
			default : result = "미결정"; break;
		}
		return result + (value*100);
	} &gt;
	public static void main(String []args) {
		PEI index = PEI.PHYSICAL;
		double value = 0.86;
		System.out.println("신체 지수 주기값 : "+index.getPei());
		String st = textInfor(index, value);
		System.out.println(st);
		System.out.println(index.ordinal());
		System.out.println(index.name());
		System.out.println(index);
		System.out.println(index.getPei());
	}
}
</code></pre></div></div>

<p>//결과</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>신체 지수 주기값 : 23
신체지수86.0
0
PHYSICAL
PHYSICAL
23
</code></pre></div></div>]]></content><author><name>경동훈</name></author><category term="JAVA" /><category term="JAVA" /><category term="Pratice" /><summary type="html"><![CDATA[public enum PEI { PHYSICAL(23),EMOTIONAL(28),INTELLECTUAL(33); private final int peiValue; PEI(int pie){ this.peiValue=pie; } public int getPei() { return peiValue; } }]]></summary></entry></feed>